<!--悬赏版块页面
    以 scu_ 开头的页面及组件均在该项目中预览效果
    该页面使用app.wpy引入的weui样式-->
<template>
  <view class="page">
    <view class="page__bd">
      <view class="tabs">
        <view class="tab search" @tap="onSearchTap">
          <icon type="search" size="20"></icon>
        </view>
        <view class="tab order" @tap="onOrderTap">筛选</view>
      </view>
      <scroll-view class="tasklist" scroll-y="true">
        <repeat for="{{ taskItems }}" key="index" index="index" item="item">
          <navigator class="taskitem" url="./../pages/re_rewardDetail?id={{ item.detailId }}">
            <view class="taskitem_bd">
              <!-- 一个表示任务状态的图标，效果类似图章，放置在内容部分的左上角 -->
              <view class="taskitem_state">
                <image 
                  src="./../images/taskState{{ item.state }}.png"
                  style='width:100%;height:100%;opacity: 0.6;'
                  mode="aspectFill" />
              </view>
              <view class="taskitem_content">
                <!--任务简介，包括标题、关键词、发布人、地点、金额、有效时间-->
                <view class="taskitem_title {{ item.cover?'taskitem_title-with-cover':'' }}">
                  {{ item.title }}
                </view>
                <view class="taskitem_cover" wx:if="{{ item.cover && item.cover != 'none' }}">
                  <image 
                    src="{{ item.cover }}"
                    style='width:100%;height:100%;'
                    mode="aspectFill" />
                </view>
                <view class="taskitem_avatar">
                  <image
                    src="{{ item.avatar }}"
                    mode="aspectFill"
                    style='width:100%;height:100%;' />
                </view>
                <view class="taskitem_info">
                  <view class="taskitem_info-tags">
                    <repeat for="{{ item.tags }}" key="index_tag" index="index_tag" item="item_tag">
                      <view class="tag">{{ item_tag }}</view>
                    </repeat>
                    </view>
                  <view class="taskitem_info-siteNreward">
                    {{ item.site + ' - ' + item.reward }}
                  </view>
                  <view class="taskitem_info-taskdate">{{ item.timeLeftDisplayed }}</view>
                </view>
              </view>
            </view>
          </navigator>
        </repeat>
        <view class="weui-loadmore">
          <view class="weui-loading"/>
          <view class="weui-loadmore__tips">加载中</view>
        </view>
      </scroll-view>
      <hoverBtn :postUrl="postUrl"></hoverBtn>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import HoverBtn from './../components/hover-button'

console.debug = function(){}

export default class extends wepy.page {
  config = {
    navigationBarTitleText: '悬赏'
  }
  data = {
    // 页面显示数据 (测试数据已移除)
    taskItems: [],
    
    // 页面状态记录数据
    postUrl: './re_rewardPost',
    currentPage: 0,   // 当前页数(数据库)
    pageNum: 10,      // 每页的任务数量
    getType: 'new',   // 悬赏任务的获取方式(排序方式)
  }
  methods = {
    onSearchTap() {
      wepy.navigateTo({
        url: './re_rewardSearch'
      })
    },
    onOrderTap(){
      wepy.showActionSheet({
        itemList: ['发布时间',]
      })
      .then(res => {
        switch(res.tapIndex) {
          case 0:
            if (self.getType == 'new'){
              break
            }else{
              self.getType = 'new'
              /** 清空任务列表并按指定排序方式获取新的悬赏任务 */
              self.taskItems = []
              self.currentPage = 0
              self.loadMoreItems(self.getType)
              break
            }

          default:
            break;
        }
      })
    },
    // 已弃用方法
    onOrderTapDeprecated() {
      /**
       * 对已加载的任务进行排序
       * （仅排序已加载的任务，即未加载的任务无法进行排序）
       */
      let self = this
      wepy.showActionSheet({
        itemList: ['悬赏金额顺序', '悬赏金额逆序', '剩余时间顺序', '剩余时间逆序']
      })
      .then(function(res) {
        let index = res.tapIndex
        let sequence = function() {}
        switch (index) {
          case 0:
            sequence = function(a, b) {
              let ra = parseInt(a.reward)
              let rb = parseInt(b.reward)
              if (isNaN(ra)) { return 1 } else if (isNaN(rb)) { return -1 }
              if (ra > rb) { return 1 } else if (ra < rb) { return -1 } else { return 0 }
            }
            break
          case 1:
            sequence = function(a, b) {
              let ra = parseInt(a.reward)
              let rb = parseInt(b.reward)
              if (isNaN(ra)) { return 1 } else if (isNaN(rb)) { return -1 }
              if (ra < rb) { return 1 } else if (ra > rb) { return -1 } else { return 0 }
            }
            break
          case 2:
            sequence = function(a, b) {
              let ra = parseInt(a.timeLeft)
              let rb = parseInt(b.timeLeft)
              if (isNaN(ra)) { return 1 } else if (isNaN(rb)) { return -1 }
              if (ra > rb) { return 1 } else if (ra < rb) { return -1 } else { return 0 }
            }
            break
          case 3:
            sequence = function(a, b) {
              let ra = parseInt(a.timeLeft)
              let rb = parseInt(b.timeLeft)
              if (isNaN(ra)) { return 1 } else if (isNaN(rb)) { return -1 }
              if (ra < rb) { return 1 } else if (ra > rb) { return -1 } else { return 0 }
            }
            break
        }
        self.taskItems.sort(sequence)
        self.$apply()
      })
    },
  }
  components = {
    hoverBtn: HoverBtn
  }
  onLoad() {
    let self = this
    wx.cloud.init()  // #### 只需要初始化一次，可移动到app.wpy中 
  }
  onReady() {
    let self = this
    self.loadMoreItems(self.getType)
  }
  onShow() {
    let self = this
    wepy.showToast({
      title: '右下方添加悬赏', 
      icon: 'success', 
      duration: 1000, 
      mask: true
    })
    self.updateTimeLeft(self.getType)
  }
  onReachBottom() {
    let self = this
    self.loadMoreItems(self.getType)
  }
  onPullDownRefresh() {
    /** 清空任务数据重新请求#### */
  }
  updateTimeLeft() {
    /**
     * 为页面数据的taskItems的每一项更新“剩余时间”属性
     * 显示格式: 距结束还剩 天数 时间
     */
    let self = this
    let now = new Date()
    for (let i = 0; i < self.taskItems.length; i++) {
      let task = self.taskItems[i]
      if (task.timeLeftDisplayed) {
        continue
      } else if (now > task.empiredDate) {
        task.timeLeft = 0
        task.timeLeftDisplayed = '已结束'
      } else {
        task.timeLeft = task.empiredDate - now
        task.timeLeftDisplayed = ''
        let days = Math.floor(task.timeLeft / 86400000)
        let hours = Math.floor((task.timeLeft % 86400000) / 3600000)
        task.timeLeftDisplayed += '距结束还剩' + days + '天' + hours + '小时'
      }
    }
    self.$apply()
  }
  loadMoreItems(getType) {
    /**
     * 从服务器获取更多悬赏任务(reward task)，放入页面数据中
     * 根据筛选的具体需求需要后续改进####
     */
    // console.debug('加载中...')
    let self = this
    const db = wx.cloud.database()
    switch(getType){
      case 'new':
      /* #### 从后端获取问题列表存储到taskList中，之后要放到云函数中 */
        // console.debug('new')
        db.collection('reward_list')
          .orderBy('postDate', 'desc')
          .skip(self.currentPage * self.pageNum)
          .limit(self.pageNum)
          .get()
          .then(res => {
            self.taskItems.push(...res.data)
            self.currentPage += 1
            self.updateTimeLeft()
            self.$apply()
          }).catch(err => {
            console.debug(err)
          })
        break
      default:
        break
    }
    self.updateTimeLeft()
  }

  // 弃用方法
  updateTimeLeftDeprecated() {
    /**
     * 已弃用
     * 为页面数据的taskItems的每一项添加“显示的任务有效时间”属性
     * 显示格式: 开始日期 开始时间 —— 结束日期 结束时间
     */
    let self = this
    let now = new Date()
    for (let i = 0; i < self.taskItems.length; i++) {
      if (self.taskItems[i].taskDateDisplayed) {
        continue
      } else if (self.taskItems[i].empiredDate && self.taskItems[i].postDate) {
        let task = self.taskItems[i]
        let postDate = task.postDate
        let empiredDate = task.empiredDate
        let taskEmpiredToday = false
        task.taskDateDisplayed = ''
        // 开始时间
        if (postDate.getFullYear() !== now.getFullYear()) {
          task.taskDateDisplayed += postDate.getFullYear() + '-'
        }
        if (postDate.toDateString() === now.toDateString()) {
          task.taskDateDisplayed += '今天'
          taskEmpiredToday = true
        } else {
          task.taskDateDisplayed += (postDate.getMonth() + 1) + '-' + postDate.getDate() + ' '
        }
        task.taskDateDisplayed += postDate.getHours() + ':' + postDate.getMinutes() + '——'
        // 截止时间
        if (empiredDate.getFullYear() !== postDate.getFullYear()) {
          task.taskDateDisplayed += empiredDate.getFullYear() + '-'
        }
        if (empiredDate.toDateString() !== postDate.toDateString()) {
          if (!taskEmpiredToday) {
            task.taskDateDisplayed += (empiredDate.getMonth() + 1) + '-' + empiredDate.getDate() + ' '
          }
        }
        task.taskDateDisplayed += empiredDate.getHours() + ':' + empiredDate.getMinutes()
      }
    }
  }
}
</script>
<style lang="less">
@pageBgColor: #F8F8F8;

.tabs {
  position: fixed;
  height: 60rpx;
  width: calc(~ "100% - 20rpx");
  border-bottom: 1rpx solid @pageBgColor;
  display: flex;
  justify-content: center;
  align-items: center;
  background: white;
  z-index: 100;
  .tab {
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-grow: 1;
  }
}
.tasklist {
  height: 100%;
  width: 100%;
  padding-top: 50rpx;
  .taskitem {
    width: 100%;
  }
}
.tasklist .taskitem .taskitem_bd {
  position: relative;
  overflow: hidden;
  padding: 20rpx;
  height: auto;
  background-color: #fff;
  margin-bottom: 15rpx;
  .taskitem_state {
    position: absolute;
    top: -30rpx;
    left: -10rpx;
    height: 160rpx;
    width: 160rpx;
  }
}
.tasklist .taskitem_bd .taskitem_content {
  position:relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: flex-start;
  .taskitem_title {
    text-align: left;
    padding-left: 20%;
    margin-bottom: 24rpx;
    font-size: 36rpx;
    flex-basis: 100%;
    order: 0;
    overflow: hidden;
    overflow-wrap: break-word;
  }
  .taskitem_title-with-cover {
    flex-basis: 60%;
    margin-right: 10rpx;
  }
  .taskitem_cover {
    height: 200rpx;
    margin-bottom: 15rpx;
    flex-basis: 30%;
    flex-grow: 1;
    order: 1;
  }
  .taskitem_avatar {
    height: 80rpx;
    width: 80rpx;
    border-radius: 50%;
    margin-right: 30rpx;
    margin-left: 10rpx;
    overflow: hidden;
    align-self: flex-end;
  }
}
.tasklist .taskitem_bd .taskitem_content .taskitem_info {
  color: #aaa;
  order: 2;
  flex-grow: 1;
  flex-basis: 60%;
  display: flex;
  justify-content: flex-start;
  flex-wrap: wrap;
  .taskitem_info-tags {
    flex-basis: 100%;
    flex-shrink: 0;
    order: 0;
    font-size: 30rpx;
    margin-bottom: 10rpx;
    display: flex;
    justify-content: flex-start;
    .tag {
      margin-bottom: 0;
      // flex-basis: 25%;
      flex-grow: 0;
    }
  }
  .taskitem_info-siteNreward {
    flex-grow: 1;
  }
  .taskitem_info-taskdate {
    text-align: right;
    font-size: 30rpx;
    color: #bbb;
    flex-grow: 1;
  }
}
</style>
